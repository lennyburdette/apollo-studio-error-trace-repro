schema
  @core(feature: "https://specs.apollo.dev/core/v0.1"),
  @core(feature: "https://specs.apollo.dev/join/v0.1")
{
  query: Query
}

directive @core(feature: String!) repeatable on SCHEMA

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet) on FIELD_DEFINITION

directive @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on OBJECT | INTERFACE

directive @join__owner(graph: join__Graph!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

type Astronaut
  @join__owner(graph: ASTRONAUTS)
  @join__type(graph: ASTRONAUTS, key: "id")
  @join__type(graph: MISSIONS, key: "id")
{
  id: ID! @join__field(graph: ASTRONAUTS)
  missions: [Mission] @join__field(graph: MISSIONS)
  name: String @join__field(graph: ASTRONAUTS)
}

scalar join__FieldSet

enum join__Graph {
  ASTRONAUTS @join__graph(name: "astronauts" url: "http://astronauts:4000/")
  MISSIONS @join__graph(name: "missions" url: "http://missions:4000/")
  VEHICLES @join__graph(name: "vehicles" url: "http://vehicles:4000/")
}

type Mission {
  crew: [Astronaut]
  designation: String!
  endDate: String
  id: ID!
  startDate: String
  vehicle: Vehicle!
}

type Query {
  astronaut(id: ID!): Astronaut @join__field(graph: ASTRONAUTS)
  astronauts: [Astronaut] @join__field(graph: ASTRONAUTS)
  mission(id: ID!): Mission @join__field(graph: MISSIONS)
  missions: [Mission] @join__field(graph: MISSIONS)
  vehicle(id: ID!): Vehicle @join__field(graph: VEHICLES)
  vehicles: [Vehicle] @join__field(graph: VEHICLES)
}

type Vehicle
  @join__owner(graph: VEHICLES)
  @join__type(graph: VEHICLES, key: "id")
  @join__type(graph: MISSIONS, key: "id")
{
  id: ID! @join__field(graph: VEHICLES)
  model: String @join__field(graph: VEHICLES)
}
